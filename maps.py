# -*- coding: utf-8 -*-
"""Maps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sh7mu4pQQ2VoKUDHtw9LrxVExuEMvPt_
"""

import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')
location ='drive/MyDrive/Final_Project/NYC_Data_Crime_Factors.csv'

#location ='Boroughwise Median Income.csv'
df = pd.read_csv(location)
df.sort_values('Boro_NM')
print(df)

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Median_Income'], marker='o', label='Median Income', color='skyblue', linestyle='-')
plt.title("Median Income")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Poverty_Rate'], marker='o', label='Poverty_Rate', color='skyblue', linestyle='-')
plt.title("Poverty_Rate")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Foreign_Popluation'], marker='o', label='Foreign_Popluation', color='skyblue', linestyle='-')
plt.title("Foreign_Popluation")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Education'], marker='o', label='Education', color='skyblue', linestyle='-')
plt.title("Education")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['School_Enrol'], marker='o', label='School_Enrol', color='skyblue', linestyle='-')
plt.title("School_Enrol")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Class_of_worker'], marker='o', label='Class_of_worker', color='skyblue', linestyle='-')
plt.title("Class_of_worker")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(df['Boro_NM'], df['Complaint_Count'], marker='o', label='Complaint Count', color='skyblue', linestyle='-')
plt.title("Complaint count")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(df['Boro_NM'], df['Employment_Rate'], marker='o', label='Employment_Rate', color='skyblue', linestyle='-')
plt.title("Employment_Rate")
plt.xlabel('Borough Name')
plt.ylabel('Values')
plt.legend()

plt.tight_layout()
plt.show()

print(df.dtypes)

df.columns

timestamp_columns = df.select_dtypes(include=['datetime64']).columns
print("Columns with Timestamp data:", timestamp_columns)

df['Median_Income'] = df['Median_Income'].astype(float)
df['FIP'] = df['FIP'].astype(str)

print(df.isna().any())

import geopandas as gpd
geojson_file ='drive/MyDrive/Final_Project/new-york-city-boroughs.geojson'
#geojson_file = 'new-york-city-boroughs.geojson'
geodata = gpd.read_file(geojson_file)
geodata.sort_values('BORO_NM')

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Median_Income',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Median Income': 'Median_Income'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Poverty_Rate',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Poverty_Rate': 'Poverty_Rate'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Foreign_Popluation',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Foreign_Popluation': 'Foreign_Popluation'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Education',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Education': 'Education'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='School_Enrol',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'School_Enrol': 'School_Enrol'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Class_of_worker',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Class_of_worker': 'Class_of_worker'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

import requests
import json

r = requests.get('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json')
counties = json.loads(r.text)
target_states = ['36']
counties['features'] = [f for f in counties['features'] if f['properties']['STATE'] in target_states]

fig = px.choropleth(df, geojson=counties, locations='FIP', color='Employment_Rate',
                    color_continuous_scale='Viridis',
                    scope='usa',
                    labels={'Employment_Rate': 'Employment_Rate'}
                    )
fig.update_geos(center={'lon': -74, 'lat': 43}, projection_scale=6)
fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
fig.show()

